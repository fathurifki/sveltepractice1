
(function(l, i, v, e) { v = l.createElement(i); v.async = 1; v.src = '//' + (location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; e = l.getElementsByTagName(i)[0]; e.parentNode.insertBefore(v, e)})(document, 'script');
var app = (function (internal) {
	'use strict';

	/* src/App.svelte generated by Svelte v3.4.1 */

	const file = "src/App.svelte";

	function create_fragment(ctx) {
		var h1, t0, t1, t2, t3, t4, button, dispose;

		return {
			c: function create() {
				h1 = internal.element("h1");
				t0 = internal.text("Hello ");
				t1 = internal.text(name);
				t2 = internal.text("!, my age is ");
				t3 = internal.text(ctx.age);
				t4 = internal.space();
				button = internal.element("button");
				button.textContent = "Change Age";
				h1.className = "svelte-i7qo5m";
				internal.add_location(h1, file, 15, 0, 142);
				internal.add_location(button, file, 16, 0, 182);
				dispose = internal.listen(button, "click", ctx.incrementAge);
			},

			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},

			m: function mount(target, anchor) {
				internal.insert(target, h1, anchor);
				internal.append(h1, t0);
				internal.append(h1, t1);
				internal.append(h1, t2);
				internal.append(h1, t3);
				internal.insert(target, t4, anchor);
				internal.insert(target, button, anchor);
			},

			p: function update(changed, ctx) {
				if (changed.age) {
					internal.set_data(t3, ctx.age);
				}
			},

			i: internal.noop,
			o: internal.noop,

			d: function destroy(detaching) {
				if (detaching) {
					internal.detach(h1);
					internal.detach(t4);
					internal.detach(button);
				}

				dispose();
			}
		};
	}

	let name = 'Rifki';

	function instance($$self, $$props, $$invalidate) {
		
		let age = 25;

		function incrementAge(){
			$$invalidate('age', age += 1);
		}

		return { age, incrementAge };
	}

	class App extends internal.SvelteComponentDev {
		constructor(options) {
			super(options);
			internal.init(this, options, instance, create_fragment, internal.safe_not_equal, []);
		}
	}

	const app = new App({
		target: document.body,
	});

	return app;

}(internal));
//# sourceMappingURL=bundle.js.map
