
(function(l, i, v, e) { v = l.createElement(i); v.async = 1; v.src = '//' + (location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; e = l.getElementsByTagName(i)[0]; e.parentNode.insertBefore(v, e)})(document, 'script');
var app = (function (internal) {
	'use strict';

	/* src/App.svelte generated by Svelte v3.4.1 */

	const file = "src/App.svelte";

	function create_fragment(ctx) {
		var h1, t0, t1, t2;

		return {
			c: function create() {
				h1 = internal.element("h1");
				t0 = internal.text("Hello ");
				t1 = internal.text(ctx.name);
				t2 = internal.text("!");
				h1.className = "svelte-i7qo5m";
				internal.add_location(h1, file, 10, 0, 82);
			},

			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},

			m: function mount(target, anchor) {
				internal.insert(target, h1, anchor);
				internal.append(h1, t0);
				internal.append(h1, t1);
				internal.append(h1, t2);
			},

			p: function update(changed, ctx) {
				if (changed.name) {
					internal.set_data(t1, ctx.name);
				}
			},

			i: internal.noop,
			o: internal.noop,

			d: function destroy(detaching) {
				if (detaching) {
					internal.detach(h1);
				}
			}
		};
	}

	function instance($$self, $$props, $$invalidate) {
		let { name } = $$props;

		$$self.$set = $$props => {
			if ('name' in $$props) $$invalidate('name', name = $$props.name);
		};

		return { name };
	}

	class App extends internal.SvelteComponentDev {
		constructor(options) {
			super(options);
			internal.init(this, options, instance, create_fragment, internal.safe_not_equal, ["name"]);

			const { ctx } = this.$$;
			const props = options.props || {};
			if (ctx.name === undefined && !('name' in props)) {
				console.warn("<App> was created without expected prop 'name'");
			}
		}

		get name() {
			throw new Error("<App>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set name(value) {
			throw new Error("<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	const app = new App({
		target: document.body,
		props: {
			name: 'world',
			age: '25',
		}
	});

	return app;

}(internal));
//# sourceMappingURL=bundle.js.map
